<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SpcPgm</name>
    </assembly>
    <members>
        <member name="T:Sunlike.Business.Data.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.MissingSchemaAction)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="missingSchemaAction">MissingSchemaAction</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.MissingSchemaAction,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="missingSchemaAction">MissingSchemaAction</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.MissingSchemaAction)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="missingSchemaAction">MissingSchemaAction</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.MissingSchemaAction,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="missingSchemaAction">MissingSchemaAction</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],Sunlike.Business.Data.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.MissingSchemaAction)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
            <param name="missingSchemaAction">MissingSchemaAction</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.MissingSchemaAction,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="missingSchemaAction">MissingSchemaAction</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.MissingSchemaAction)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="missingSchemaAction">MissingSchemaAction</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.MissingSchemaAction,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="missingSchemaAction">MissingSchemaAction</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.MissingSchemaAction,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="missingSchemaAction">MissingSchemaAction</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDatasetSchema(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDatasetSchema(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDatasetSchema(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDatasetSchema(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDatasetSchema(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDatasetSchema(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDatasetSchema(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDatasetSchema(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDatasetSchema(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDatasetSchema(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDatasetSchema(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDatasetSchema(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDatasetSchema(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDatasetSchema(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDatasetSchema(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDatasetSchema(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDatasetSchema(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDatasetSchema(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.FillDatasetSchema(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDatasetSchema(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:Sunlike.Business.Data.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:Sunlike.Business.Data.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:Sunlike.Business.Data.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:Sunlike.Business.Data.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:Sunlike.Business.ConnInfo">
            <summary>
            Summary description for ConnInfo.
            </summary>
        </member>
        <member name="F:Sunlike.Business.ConnInfo.Conn_DB">
            <summary>
            记载某帐套的连接字串
            </summary>
        </member>
        <member name="T:Sunlike.Business.IAuditing">
            <summary>
            各单据终审后或者终审后反审核根据需要实现IAuditing接口
            </summary>
        </member>
        <member name="M:Sunlike.Business.IAuditing.Approve(System.String,System.String,System.String,System.DateTime)">
            <summary>
            单据终审时调用
            </summary>
            <param name="bil_id">单据代号</param>
            <param name="bil_no">单据编号</param>
            <param name="chk_man">审核人</param>
            <param name="cls_dd">审核日期</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Sunlike.Business.IAuditing.Deny(System.String,System.String,System.String,System.DateTime)">
            <summary>
            单据终审时调用
            </summary>
            <param name="bil_id">单据代号</param>
            <param name="bil_no">单据编号</param>
            <param name="chk_man">审核人</param>
            <param name="cls_dd">审核日期</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Sunlike.Business.IAuditing.RollBack(System.String,System.String)">
            <summary>
            单据终审后再反审核时调用
            </summary>
            <param name="bil_id"></param>
            <param name="bil_no"></param>
            <returns></returns>
        </member>
        <member name="T:Sunlike.Business.IAlertModule">
            <summary>
            预警平台接口
            </summary>
        </member>
        <member name="M:Sunlike.Business.IAlertModule.GetAlertType">
            <summary>
            得到预警的格式DATASET
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.IAlertModule.RunAlert(System.String,System.Collections.Hashtable)">
            <summary>
            得到预警信息,并写入ALT_DOC表中
            </summary>
        </member>
        <member name="M:Sunlike.Business.IAlertModule.FormatResult(System.String,System.String,System.Data.DataSet)">
            <summary>
            格式化预警信息,尽心显示
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sunlike.Business.RMObject">
            <summary>
            Summary description for RMObject.
            </summary>
        </member>
        <member name="M:Sunlike.Business.RMObject.#ctor">
            <summary>
            构建RMObject
            </summary>
        </member>
        <member name="M:Sunlike.Business.RMObject.InitializeLifetimeService">
            <summary>
            InitializeLifetimeService
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sunlike.Business.Data.RowUpdatingEventHandler">
            <summary>
            用来提供自动更新的元件，并提供了RowUpdating 和 RowUpdated两个事件，
            用户可以在这两个事件来做事前和事后的检查或做并发处理
            </summary>
        </member>
        <member name="T:Sunlike.Business.Data.RowUpdatedEventHandler">
            <summary>
            
            </summary>
            <param name="tableName"></param>
            <param name="statementType"></param>
            <param name="dr"></param>
            <param name="status"></param>
            <param name="recordsAffected"></param>
        </member>
        <member name="T:Sunlike.Business.Data.DbUpdate">
            <summary>
            DbUpdate
            </summary>
        </member>
        <member name="T:Sunlike.Business.Data.DbObject">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.#ctor(System.String)">
            <summary>
            DbObject
            </summary>
            <param name="sConnection">连接字串</param>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteSpDataset(System.String)">
            <summary>
            传入一个不带参数的stored Procedure,并传回DataSet(AddWithKey)
            </summary>
            <param name="commandText">Select语句</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteSpDataset(System.String,System.Data.MissingSchemaAction)">
            <summary>
            传入一个不带参数的stored Procedure和missingSchemaAction,并传回DataSet
            </summary>
            <param name="commandText"></param>
            <param name="missingSchemaAction"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteSpDataset(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            传入一个带参数的stored Procedure,并传回DataSet(AddWithKey)
            </summary>
            <param name="commandText">Select语句</param>
            <param name="commandParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteSpDataset(System.String,System.Data.MissingSchemaAction,System.Data.SqlClient.SqlParameter[])">
            <summary>
            传入一个带参数的stored Procedure和missingSchemaAction,并传回DataSet
            </summary>
            <param name="commandText">Select语句</param>
            <param name="missingSchemaAction">MissingSchemaAction</param>
            <param name="commandParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteDataset(System.String)">
            <summary>
            传入一个不带参数的Select语句,并传回DataSet(AddWithKey)
            </summary>
            <param name="commandText">Select语句</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteDataset(System.String,System.Data.MissingSchemaAction)">
            <summary>
            传入一个不带参数的Select语句和missingSchemaAction,并传回DataSet(AddWithKey)
            </summary>
            <param name="commandText"></param>
            <param name="missingSchemaAction"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteDataset(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            传入一个带参数的Select语句,并传回DataSet(AddWithKey)
            </summary>
            <param name="commandText">Select语句</param>
            <param name="commandParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteDataset(System.String,System.Data.MissingSchemaAction,System.Data.SqlClient.SqlParameter[])">
            <summary>
            传入一个带参数的Select语句和missingSchemaAction,并传回DataSet
            </summary>
            <param name="commandText">Select语句</param>
            <param name="missingSchemaAction">MissingSchemaAction</param>
            <param name="commandParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.FillDataset(System.String,System.Data.DataSet,System.String[])">
            <summary>
            传入一个不带参数的Select语句和Table Name,并传回DataSet(AddWithKey)
            </summary>
            <param name="commandText">Select语句</param>
            <param name="dataSet"></param>
            <param name="tableNames">表名</param>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.FillDataset(System.String,System.Data.DataSet,System.String[],System.Data.MissingSchemaAction)">
            <summary>
            传入一个不带参数的Select语句和Table Name和missingSchemaAction,并传回DataSet
            </summary>
            <param name="commandText">Select语句</param>
            <param name="dataSet"></param>
            <param name="tableNames">表名</param>
            <param name="missingSchemaAction">MissingSchemaAction</param>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.FillDataset(System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            传入一个带参数的Select语句和Table Name,并传回DataSet(AddWithKey)
            </summary>
            <param name="commandText">Select语句</param>
            <param name="dataSet"></param>
            <param name="tableNames">表名</param>
            <param name="commandParameters">参数</param>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.FillDataset(System.String,System.Data.DataSet,System.String[],System.Data.MissingSchemaAction,System.Data.SqlClient.SqlParameter[])">
            <summary>
            传入一个带参数的Select语句和Table Name和missingSchemaAction,并传回DataSet
            </summary>
            <param name="commandText">Select语句</param>
            <param name="dataSet"></param>
            <param name="tableNames">表名</param>
            <param name="missingSchemaAction">MissingSchemaAction</param>
            <param name="commandParameters">参数</param>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.FillDatasetSchema(System.String,System.Data.DataSet,System.String[])">
            <summary>
            传入一个不带参数的Select语句和Table Name,并传回DataSet模式
            </summary>
            <param name="commandText">Select语句</param>
            <param name="dataSet"></param>
            <param name="tableNames">表名</param>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.FillDatasetSchema(System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            传入一个带参数的Select语句和Table Name,并传回DataSet模式
            </summary>
            <param name="commandText">Select语句</param>
            <param name="dataSet"></param>
            <param name="tableNames">表名</param>
            <param name="commandParameters">参数</param>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteNonQuery(System.String)">
            <summary>
            运行不带参数的SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            运行带参数的SQL语句
            </summary>
            <param name="commandText">SQL语句</param>
            <param name="commandParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteSpNonQuery(System.String)">
            <summary>
            运行不带参数的StoreProcedure
            </summary>
            <param name="spName">SQL StoredProcedure</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteSpNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            运行带参数的StoreProcedure
            </summary>
            <param name="spName">SQL StoredProcedure</param>
            <param name="commandParameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteReader(System.String)">
            <summary>
            运行SQL指令,返回SqlDataReader
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            运行SQL指令,返回SqlDataReader(需传入SqlParameter)
            </summary>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteSpReader(System.String)">
            <summary>
            根据传入的StoredProcedure,运行SQL指令,返回SqlDataReader
            </summary>
            <param name="spName">SQL StoredProcedure</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteSpReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            根据传入的StoredProcedure,运行SQL指令,返回SqlDataReader(需传入SqlParameter)
            </summary>
            <param name="spName">SQL StoredProcedure</param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteScalar(System.String)">
            <summary>
            运行SQL指令,返回SqlDataReader
            </summary>
            <param name="commandText"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteScalar(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            运行SQL指令,取得Scala 回传值(需传入SqlParameter)
            </summary>
            <param name="commandText"></param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteSpScalar(System.String)">
            <summary>
            根据传入的StoredProcedure,运行SQL指令,返回SqlDataReader
            </summary>
            <param name="spName">SQL StoredProcedure</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.ExecuteSpScalar(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            根据传入的StoredProcedure,运行SQL指令,(需传入SqlParameter)
            </summary>
            <param name="spName">SQL StoredProcedure</param>
            <param name="commandParameters"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbObject.CreateRelation(System.Data.DataSet,System.String)">
            <summary>
            传入DataSet和主表名称,系统自动建立Relation的关系,关系的名称就是主表名+从表名
            比如说MF_PSS和TF_PSS的关联名称就是MF_PSSTF_PSS.
            </summary>
            <param name="ds">要建立关联的DataSet</param>
            <param name="mTableName">主表名称</param>
        </member>
        <member name="M:Sunlike.Business.Data.DbUpdate.#ctor(System.String)">
            <summary>
            DbUpdate 构建函数,需传入sql连接字符串
            </summary>
            <param name="connStr"></param>
        </member>
        <member name="M:Sunlike.Business.Data.DbUpdate.UpdateDataSet(System.Data.DataSet,System.Collections.Hashtable)">
            <summary>
            更新DataSet到数据库中
            </summary>
            <param name="ds">要更新的DataSet</param>
            <param name="ht">传入更新的表和字段名</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbUpdate.UpdateToSQL(System.Data.DataTable,System.Data.DataViewRowState)">
            <summary>
            根据传入的Datable和DataViewRowState来更新数据
            </summary>
            <param name="_dt">指定更新的原始Table</param>
            <param name="_dvrs">指定的DataViewRowState</param>		
        </member>
        <member name="M:Sunlike.Business.Data.DbUpdate.GetConverseRelation(System.Data.DataRelationCollection)">
            <summary>
            根据关联性,反向处理相关Table的Update 和 Delete
            </summary>
            <param name="_drs"></param>		
        </member>
        <member name="M:Sunlike.Business.Data.DbUpdate.GetRelation(System.Data.DataRelationCollection)">
            <summary>
            根据关联性,正向处理相关Table的Insert
            </summary>
            <param name="_drs"></param>		
        </member>
        <member name="M:Sunlike.Business.Data.DbUpdate.GetFieldList(System.Data.DataTable)">
            <summary>
            取得DataTable中的字段列表
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.Data.DbUpdate.ClearAllErrs(System.Data.DataSet)">
            <summary>
            完成存档冲突处理，需呼叫这个方法来清除原来的错误
            </summary>
            <param name="ds"></param>
        </member>
        <member name="P:Sunlike.Business.Data.DbUpdate.OnRowUpdating">
            <summary>
            更新前的事件代理
            </summary>
        </member>
        <member name="P:Sunlike.Business.Data.DbUpdate.OnRowUpdated">
            <summary>
            更新后的事件代理
            </summary>
        </member>
        <member name="T:Sunlike.Business.Data.SQLBatchUpdater">
            <summary>
            Summary description for SQLBatchUpdater.
            </summary>
        </member>
        <member name="M:Sunlike.Business.Data.SQLBatchUpdater.#ctor(System.String)">
            <summary>
            构建批次更新类
            </summary>
            <param name="sConnection"></param>
        </member>
        <member name="M:Sunlike.Business.Data.SQLBatchUpdater.BatchUpdate(System.Data.DataRow[],System.String)">
            <summary>
            批次更新数据库，根据传入的数据来更新数据库。
            请注意_drArray.Rows[0].TableName的表名必须和数据库的表名一致。
            </summary>
            <param name="_drArray">欲更新的DataRow[]</param>
            <param name="_fieldList">要更新的字段列表</param>
            <returns>送出更新的资料笔数</returns>
        </member>
        <member name="M:Sunlike.Business.Data.SQLBatchUpdater.BatchUpdate(System.Data.DataTable,System.String)">
            <summary>
            批次更新数据库，根据传入的数据来更新数据库。
            请注意_dt.TableName的表名必须和数据库的表名一致。
            </summary>
            <param name="_dt">欲更新的DataTable</param>
            <param name="_fieldList">要更新的字段列表</param>
            <returns>送出更新的资料笔数</returns>
        </member>
        <member name="P:Sunlike.Business.Data.SQLBatchUpdater.BatchUpdateSize">
            <summary>
            批次更新记录笔数,预设值为10
            </summary>
        </member>
        <member name="T:Sunlike.Business.IAuditingInfo">
            <summary>
            得到单据信息,各单据根据需要实现IAuditingInfo接口
            </summary>
        </member>
        <member name="M:Sunlike.Business.IAuditingInfo.GetBillInfo(System.String,System.String,System.Boolean@)">
            <summary>
            得到单据信息
            </summary>
            <param name="Bil_Id"></param>
            <param name="Bil_No"></param>
            <param name="RejectSH"></param>
            <returns></returns>
        </member>
        <member name="T:Sunlike.Business.ICloseBill">
            <summary>
            提供单据结案/反结案的一致接口
            </summary>
        </member>
        <member name="M:Sunlike.Business.ICloseBill.DoCloseBill(System.String,System.String,System.String)">
            <summary>
            单据结案时调用
            </summary>
            <param name="bil_id">单据代号</param>
            <param name="bil_no">单据编号</param>
            <param name="cls_name">结案类型,可为空</param>
            <returns>错误信息</returns>
        </member>
        <member name="M:Sunlike.Business.ICloseBill.UndoCloseBill(System.String,System.String,System.String)">
            <summary>
            单据反结案时调用
            </summary>
            <param name="bil_id">单据代号</param>
            <param name="bil_no">单据编号</param>
            <param name="cls_name">结案类型,可为空</param>
            <returns>错误信息</returns>
        </member>
        <member name="T:Sunlike.Business.BizObject">
            <summary>
            商业逻辑层的基类，所有商业逻辑层的类别都必须继承至此类别
            </summary>
        </member>
        <member name="M:Sunlike.Business.BizObject.#ctor">
            <summary>
            BizObject
            </summary>
        </member>
        <member name="M:Sunlike.Business.BizObject.UpdateDataSet(System.Data.DataSet,System.Collections.Hashtable)">
            <summary>
            提供当前帐套 DataSet的自动更新,如果这个DataSet有自定义字段或是Join其他表格的字段，
            则必须传入一个HashTable，否则会发生错误。Hasttable的格式如下：
            ht.Add(tableName,fieldList)
            如果要控制更新的并发处理，可以override(重写) BeforeUpdate和AfterUpdate两个函数
            </summary>
            <param name="ds"></param>
            <param name="ht">传入一个HashTable</param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.BizObject.UpdateDataSet(System.Data.DataSet)">
            <summary>
            提供当前帐套 DataSet的自动更新,如果这个DataSet有自定义字段或是Join其他表格的字段，
            则必须传入一个HashTable，否则会发生错误。Hasttable的格式如下：
            ht.Add(tableName,fieldList)
            如果要控制更新的并发处理，可以override(重写) BeforeUpdate和AfterUpdate两个函数
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.BizObject.UpdateDataSet(System.String,System.Data.DataSet)">
            <summary>
            提供非当前帐套 DataSet的自动更新,必须手动传入ConnectoinString
            如果这个DataSet有自定义字段或是Join其他表格的字段，
            则必须传入一个HashTable，否则会发生错误。Hasttable的格式如下：
            ht.Add(tableName,fieldList)
            如果要控制更新的并发处理，可以override(重写) BeforeUpdate和AfterUpdate两个函数
            </summary>
            <param name="connStr"></param>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.BizObject.UpdateDataSet(System.String,System.Data.DataSet,System.Collections.Hashtable)">
            <summary>
            提供非当前帐套 DataSet的自动更新,必须手动传入ConnectoinString
            如果这个DataSet有自定义字段或是Join其他表格的字段，
            则必须传入一个HashTable，否则会发生错误。Hasttable的格式如下：
            ht.Add(tableName,fieldList)
            如果要控制更新的并发处理，可以override(重写) BeforeUpdate和AfterUpdate两个函数
            </summary>
            <param name="connStr"></param>
            <param name="ds"></param>
            <param name="ht"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.BizObject.EnterTransaction">
            <summary>
            宣该开始启动Transaction,开始启动DTC Transaction
            </summary>
        </member>
        <member name="M:Sunlike.Business.BizObject.LeaveTransaction">
            <summary>
            宣该结束Transaction，结束整个DTC Transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.BizObject.SetComplete">
            <summary>
            宣告交易完成，当资料成功存档时，呼叫此方法
            </summary>
        </member>
        <member name="M:Sunlike.Business.BizObject.SetAbort">
            <summary>
            宣告交易失败，当你希望资料Rollback时，呼叫此方法
            </summary>
        </member>
        <member name="M:Sunlike.Business.BizObject.BeforeUpdate(System.String,System.Data.StatementType,System.Data.DataRow,System.Data.UpdateStatus@)">
            <summary>
            当子类呼叫UpdateDataSet时，在更新相对应DataTable的每一行DataRow之前，会引发BeforeUpdate。		
            </summary>
            <param name="tableName">当前正在更新的Table Name</param>
            <param name="statementType">目前的更新状态</param>
            <param name="dr">当前更新的DataRow</param>
            <param name="status">后续的处理状态</param>
        </member>
        <member name="M:Sunlike.Business.BizObject.AfterDsSave(System.Data.DataSet)">
            <summary>
            完成所有更新后触发
            </summary>
            <param name="ds">当前的DataSet</param>
        </member>
        <member name="M:Sunlike.Business.BizObject.BeforeDsSave(System.Data.DataSet)">
            <summary>
            开始所有更新前触发
            </summary>
            <param name="ds">当前的DataSet</param>
        </member>
        <member name="M:Sunlike.Business.BizObject.AfterUpdate(System.String,System.Data.StatementType,System.Data.DataRow,System.Data.UpdateStatus@,System.Int32)">
            <summary>
            当子类呼叫UpdateDataSet时，在更新相对应的DataTable的每一行DataRow之后，会引发AfterUpdate。		
            </summary>
            <param name="tableName">当前正在更新的Table Name</param>
            <param name="statementType">目前的更新状态</param>
            <param name="dr">当前更新的DataRow</param>
            <param name="status">后续的处理状态</param>
            <param name="recordsAffected">更新后，实际变动的资料笔数</param>
        </member>
        <member name="M:Sunlike.Business.BizObject.GetAllErrors(System.Data.DataSet)">
            <summary>
            传入一个DataSet,此函数会返回一个DataTable，其中记载了所有在RowError和ColumnError的错误讯息
            此DataTable的字段有
            ["TableName"]  记载发生错误的表名
            ["ColumnName"] 记载发生错误的字段名，如果为空，则表示是这个错误是RowError
            ["ITM"]		   记载是那一行发生错误
            ["REM"]		   记载发生错误的讯息
            </summary>
            <param name="ds"></param>
            <returns></returns>
            <example>
            <code>
            <list type="bullet">
            <item>
            <description>
            DataTable dt = Sunlike.Business.BizObject.GetAllErrors(ds);
            dataGrid2.DataSource = dt;
            Console.Write("Table  Name   = "+dt.Rows[0]["TableName"]);
            Console.Write("Column Name   = "+dt.Rows[0]["ColumnName"]);
            Console.Write("Error Itm     = "+dt.Rows[0]["ITM"]);
            Console.Write("Error Message = "+dt.Rows[0]["REM"]);
            </description>
            </item>
            </list>
            </code>
            </example>		
        </member>
        <member name="M:Sunlike.Business.BizObject.GetErrorsString(System.Data.DataSet)">
            <summary>
            传入一个DataSet,此函数会返回一个String，其中记载了所有在RowError和ColumnError的错误讯息
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="F:Sunlike.Business.LocaleType.SimplifiedChinese">
            <summary>
            Simplified Chinese (简体)
            </summary>
        </member>
        <member name="F:Sunlike.Business.LocaleType.TraditionalChinese">
            <summary>
            Traditional Chinese (繁体)
            </summary>
        </member>
        <member name="F:Sunlike.Business.LocaleType.Others">
            <summary>
            Others  (英文或其他)
            </summary>
        </member>
        <member name="F:Sunlike.Business.LocaleType.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:Sunlike.Business.ChineseConveter.SynonymConvert">
            <summary>
             同义词转换否
            </summary>
        </member>
        <member name="F:Sunlike.Business.ChineseConveter.Switch">
            <summary>
            执行简体/繁体的开关，SwitchType.OFF 则不运行任何转换；
            </summary>
        </member>
        <member name="F:Sunlike.Business.ChineseConveter.ServerLocale">
            <summary>
            服务器端(SQL Server)的Locale
            </summary>
        </member>
        <member name="M:Sunlike.Business.ChineseConveter.GetStringFromStream(System.IO.Stream)">
            <summary>
            把Stream转为string
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.ChineseConveter.NeedConvert(Sunlike.Business.LocaleType)">
            <summary>
            是否运行简体/繁体转换,判断方式为  客户端.LocalType != 服务器端.LocalType 的情况下才转码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.ChineseConveter.NeedConvert">
            <summary>
            是否运行简体/繁体转换,判断方式为 Switch == SwitchType.ON  ，就一律都转码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.ChineseConveter.ConvertString(Sunlike.Business.LocaleType,System.String)">
            <summary>
            根据传入的LocaleType 来做简繁转换，不判断SwitchType是否为ON，一律转换
            </summary>
            <param name="locale"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.ChineseConveter.ConvertByServerLocale(System.Data.DataTable)">
            <summary>
            根据ServerLocale转换DataSet中的字符
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Sunlike.Business.ChineseConveter.ConvertByServerLocale(System.Data.DataSet)">
            <summary>
            根据ServerLocale转换DataSet中的字符
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.ChineseConveter.ConvertByServerLocale(System.String)">
            <summary>
            根据ServerLocale转换String中的字符
            </summary>
            <param name="strContent"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.ChineseConveter.ConvertByClientLocale(Sunlike.Business.LocaleType,System.Data.DataTable)">
            <summary>
            转换DataSet中的字符
            </summary>
            <param name="ClientLocale"></param>
            <param name="dt"></param>
        </member>
        <member name="M:Sunlike.Business.ChineseConveter.ConvertByClientLocale(Sunlike.Business.LocaleType,System.Data.DataSet)">
            <summary>
            转换DataSet中的字符
            </summary>
            <param name="ClientLocale"></param>
            <param name="ds"></param>
        </member>
        <member name="M:Sunlike.Business.ChineseConveter.ConvertByClientLocale(Sunlike.Business.LocaleType,System.String)">
            <summary>
            转换String中的字符
            </summary>
            <param name="ClientLocale"></param>
            <param name="strContent"></param>
            <returns></returns>
        </member>
        <member name="M:Sunlike.Business.ChineseConveter.GetWebClientLocale">
            <summary>
            根据客户端cookie来决定客户端语言别
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
